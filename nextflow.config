/*
========================================================================================
    nfvir Nextflow config file
========================================================================================
*/

// Global default params
params {
    // Input options
    assembly       = null
    reads          = null
    genomad_db     = null
    checkv_db      = null

    // Output options
    outdir         = './results'
    publish_dir_mode = 'copy'

    // Process options
    max_cpus       = 16
    max_memory     = '128.GB'
    max_time       = '240.h'

    // Container options
    singularity_pull_docker_container = false
}

// Process configuration
process {
    // Default resources
    cpus   = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h * task.attempt, 'time' ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withLabel: process_low {
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h * task.attempt, 'time' ) }
    }
    withLabel: process_medium {
        cpus   = { check_max( 6 * task.attempt, 'cpus' ) }
        memory = { check_max( 36.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }
    withLabel: process_high {
        cpus   = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 72.GB * task.attempt, 'memory' ) }
        time   = { check_max( 16.h * task.attempt, 'time' ) }
    }

    // Publishing directories
    withName: GENOMAD_ENDTOEND {
        publishDir = [
            path: { "${params.outdir}/genomad" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CHECKV_ENDTOEND {
        publishDir = [
            path: { "${params.outdir}/checkv" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DEREPLICATE {
        publishDir = [
            path: { "${params.outdir}/dereplicated-votus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: EXTRACT_REPSEQ {
        publishDir = [
            path: { "${params.outdir}/dereplicated-votus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MINIMAP2_ALIGN {
        publishDir = [
            path: { "${params.outdir}/alignments" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// Execution profiles
profiles {
    docker {
        docker.enabled         = true
        docker.runOptions      = '-u $(id -u):$(id -g)'
        docker.registry        = 'quay.io'
        singularity.enabled    = false
        conda.enabled          = false
    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        singularity.registry   = 'quay.io'
        docker.enabled         = false
        conda.enabled          = false
    }

    podman {
        podman.enabled         = true
        podman.registry        = 'quay.io'
    }

    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
    }

    standard {
        process.executor       = 'local'
    }

    test {
        params.assembly    = "${projectDir}/data/human_gut_assembly.fa.gz"
        params.reads       = "${projectDir}/data/reads.csv"
        params.outdir      = "./test_results"
        params.max_cpus    = 4
        params.max_memory  = '16.GB'
        params.max_time    = '2.h'
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nfvir'
    author          = 'nfvir contributors'
    homePage        = 'https://github.com/nfvir/nfvir'
    description     = 'A simple viromics pipeline to mine viral genomes in a metagenome'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
